substitutions:
  name: noahclock

esphome:
  name: ${name}
  platform: ESP32
  board: esp32dev

<<: !include ./common.yaml
<<: !include ./bluetooth_proxy.yaml

logger:
  level: DEBUG

globals:
  - id: progress
    type: int
    restore_value: no
    initial_value: '0'

sensor:
  - platform: uptime
    name: Uptime
    update_interval: 60s
  - platform: template
    name: Progress Percent
    id: progress_percent
    unit_of_measurement: "%"
    state_class: measurement
    icon: mdi:percent
    lambda: |
      return id(progress) < 0 ? 0 : id(progress);

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/London
    on_time_sync:
      then:
        - if:
            condition:
              - light.is_off: led_matrix_light
            then:
              - light.turn_on: led_matrix_light

    on_time:
      - seconds: "0"
        then:
          - lambda: |
              float hour, alarm, remaining, total, evening, percent;
              int day_of_week;

              evening = (float)id(evening_time).state;
              hour = id(sntp_time).now().hour + (0.0166666666667 * id(sntp_time).now().minute);
              day_of_week = id(sntp_time).now().day_of_week;

              // if its sunday-thursday & evening or if its mon-fri
              // sun = 1
              // mon = 2
              // tue = 3
              // wed = 4
              // thu = 5
              // fri = 6
              // sat = 7

              if ( (day_of_week <= 5 && hour >= evening) || (day_of_week >= 2 && day_of_week <= 6 )) {
                alarm = id(weekday_alarm).state;
              } else {
                alarm = id(weekend_alarm).state;
              }

              total = 24.00 - evening + alarm;

              if (hour >= evening) {
                alarm += 24;
              }

              remaining = alarm-hour;
              percent = (100/total) * remaining;

              ESP_LOGD("remaining", "hour: %f total: %f alarm:%f remain: %f perecent: %f, evening: %f", hour, total, alarm, remaining, percent, evening);
              
              id(progress) = percent;

font:
  - id: tinyfont
    file: "lexis.ttf"
    size: 8
    glyphs: \'!"%()+,-_.:*=°?~# 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ

number:
  - platform: template
    name: "Weekday alarm"
    optimistic: true
    restore_value: true
    initial_value: 7
    id: weekday_alarm
    min_value: 0
    max_value: 23
    step: 0.01
    icon: mdi:alarm
  - platform: template
    name: "Weekend alarm"
    optimistic: true
    restore_value: true
    initial_value: 8
    id: weekend_alarm
    min_value: 0
    max_value: 23
    step: 0.01
    icon: mdi:alarm
  - platform: template
    name: "Evening Time"
    optimistic: true
    restore_value: true
    initial_value: 18
    id: evening_time
    min_value: 0
    max_value: 23
    step: 0.01
    icon: mdi:clock-start

light:
  - platform: fastled_clockless
    icon: mdi:clock-digital
    chipset: WS2812B
    pin: GPIO13
    num_leds: 256
    rgb_order: GRB
    name: "Clock Led Matrix"
    id: led_matrix_light
    default_transition_length: 0s
    color_correct: [50%, 50%, 50%]
    flash_transition_length: 0s
    restore_mode: ALWAYS_OFF
 
display:
  - platform: addressable_light
    id: led_matrix_display
    addressable_light_id: led_matrix_light
    width: 32
    height: 8
    rotation: 0°
    pixel_mapper: |-
      if (x % 2 == 0) {
        return (x * 8) + y;
      }
      return (x * 8) + (7 - y);
    update_interval: 64ms
    lambda: |-
        auto color = Color(0, 0, 0);
        char str[8];

        if (id(progress) > 0 ) {
          color = Color(56, 0, 0);
          it.line(0, 0, floor(0.32 * id(progress)), 0, color);
        } else {
          color = Color(0, 255, 0);
        }

        time_t currTime = id(sntp_time).now().timestamp;
        strftime(str, sizeof(str), "%I:%M", gmtime(&currTime));

        it.print(
          1,
          1, 
          id(tinyfont),
          color, 
          TextAlign::TOP_LEFT,
          str
        );