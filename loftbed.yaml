substitutions:
  name: loftbed

esphome:
  name: ${name}
  # platform: ESP32
  # board: esp32dev

<<: !include ./common.yaml
<<: !include ./bluetooth_proxy.yaml

esp32:
  board: az-delivery-devkit-v4
  framework:
    type: esp-idf


esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true
#   on_ble_advertise:
#     - mac_address: 50:51:A9:88:C7:D7
#       then:
#         - lambda: |-
#             for (auto data : x.get_manufacturer_datas()) {
#                 ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
#                 if(data.data.size() >= 10) {
#                     char time[6];
#                     sprintf(time, "%02d:%02d", data.data[5], data.data[6]);
#                     std::string times(time);
#                     id(cns_brush_state).publish_state(data.data[3] == 3);

#                     if (data.data[7] == 7)
#                       id(cns_brush_mode).publish_state("Intense");
#                     if (data.data[7] == 2)
#                       id(cns_brush_mode).publish_state("Feather");
#                     if (data.data[7] == 4)
#                       id(cns_brush_mode).publish_state("Polish");
#                     if (data.data[7] == 3)
#                       id(cns_brush_mode).publish_state("Wave");
#                     if (data.data[7] == 6)
#                       id(cns_brush_mode).publish_state("Tongue");
#                     if (data.data[7] == 1)
#                       id(cns_brush_mode).publish_state("Normal");

#                     id(cns_brush_quadrant).publish_state(data.data[8]);
#                     id(cns_brush_time).publish_state(times);
#                 }
#             }
#     - mac_address: 34:14:B5:C2:BC:B1
#       then:
#         - lambda: |-
#             for (auto data : x.get_manufacturer_datas()) {
#                 ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
#                 if(data.data.size() >= 10) {
#                     char time[6];
#                     sprintf(time, "%02d:%02d", data.data[5], data.data[6]);
#                     std::string times(time);
#                     id(hns_brush_state).publish_state(data.data[3] == 3);
#                     if (data.data[7] == 7)
#                       id(hns_brush_mode).publish_state("Intense");
#                     if (data.data[7] == 2)
#                       id(hns_brush_mode).publish_state("Feather");
#                     if (data.data[7] == 4)
#                       id(hns_brush_mode).publish_state("Polish");
#                     if (data.data[7] == 3)
#                       id(hns_brush_mode).publish_state("Wave");
#                     if (data.data[7] == 6)
#                       id(hns_brush_mode).publish_state("Tongue");
#                     if (data.data[7] == 1)
#                       id(hns_brush_mode).publish_state("Normal");

#                     id(hns_brush_quadrant).publish_state(data.data[8]);
#                     id(hns_brush_time).publish_state(times);
#                 }
#             }
# # Modes
# # 7 = brush+
# # 2 = feather
# # 4 = polish
# # 3 = wave
# # 6 = tongue
# # 1 = normal

# # status
# # 2 = powered
# # 3 = brushing

# # id(hns_brush_mode).publish_state(data.data[7]);
# text_sensor:
#   - platform: template
#     name: Chris Toothbrush Time
#     id: cns_brush_time
#   - platform: template
#     name: Hannah Toothbrush Time
#     id: hns_brush_time

#   - platform: template
#     name: "Hannha Toothbrush Mode"
#     id: hns_brush_mode
#   - platform: template
#     name: "Chris Toothbrush Mode"
#     id: cns_brush_mode

# binary_sensor:
#   - platform: template
#     name: "Chris Toothbrush Status"
#     id: cns_brush_state
#   - platform: template
#     name: "Hannah Toothbrush Status"
#     id: hns_brush_state

# sensor:
#   - platform: template
#     name: "Chris Toothbrush Quadrant"
#     id: cns_brush_quadrant
#   - platform: template
#     name: "Hannah Toothbrush Quadrant"
#     id: hns_brush_quadrant

button:
  - platform: restart
    name: Restart